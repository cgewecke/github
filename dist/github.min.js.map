{"version":3,"sources":["github.min.js"],"names":["XMLHttpRequest","_","exports","require","btoa","window","API_URL","Github","options","_request","method","path","data","cb","raw","sync","getURL","url","indexOf","test","Date","getTime","xhr","dataType","open","onreadystatechange","this","readyState","status","responseText","JSON","parse","request","error","setRequestHeader","username","password","authorization","token","send","stringify","response","_requestAllPages","results","iterate","err","res","push","apply","links","getResponseHeader","split","next","find","link","exec","User","repos","orgs","gists","notifications","show","command","userRepos","userEvents","userFollowers","userGists","orgRepos","orgname","follow","unfollow","Repository","updateTree","branch","currentTree","sha","that","getRef","repo","name","user","repoPath","ref","object","createRef","deleteRef","createRepo","deleteRepo","listTags","tags","listPulls","state","pulls","getPull","number","pull","compare","base","head","diff","listBranches","heads","map","last","getBlob","getSha","getTree","tree","file","select","postBlob","content","encoding","String","fromCharCode","Uint8Array","baseTree","blob","base_tree","mode","type","postTree","commit","parent","message","userData","author","email","parents","updateHead","contents","fork","oldBranch","newBranch","arguments","length","createPullRequest","listHooks","getHook","id","createHook","editHook","deleteHook","read","remove","latestCommit","newTree","reject","each","rootTree","delPath","params","encodeURIComponent","move","newPath","write","getCommits","since","constructor","toISOString","until","join","Gist","gistPath","gist","create","update","star","unstar","isStarred","Issue","list","getIssues","getRepo","getUser","getGist","module","call"],"mappings":"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","file":"github.min.js","sourcesContent":["/*!\n * @overview  Github.js\n *\n * @copyright (c) 2013 Michael Aufreiter, Development Seed\n *            Github.js is freely distributable.\n *\n * @license   Licensed under MIT license\n *\n *            For all details and documentation:\n *            http://substance.io/michael/github\n */\n\n(function() {\n\n  // Initial Setup\n  // -------------\n\n  var XMLHttpRequest,  _;\n  if (typeof exports !== 'undefined') {\n      XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;\n      _ = require('underscore');\n      btoa = require('btoa');\n  } else {\n      _ = window._;\n  }\n  //prefer native XMLHttpRequest always\n  if (typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined'){\n      XMLHttpRequest = window.XMLHttpRequest;\n  }\n\n\n  var API_URL = 'https://api.github.com';\n\n  var Github = function(options) {\n\n    // HTTP Request Abstraction\n    // =======\n    //\n    // I'm not proud of this and neither should you be if you were responsible for the XMLHttpRequest spec.\n\n    function _request(method, path, data, cb, raw, sync) {\n      function getURL() {\n        var url = path.indexOf('//') >= 0 ? path : API_URL + path;\n        return url + ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime();\n      }\n\n      var xhr = new XMLHttpRequest();\n      if (!raw) {xhr.dataType = \"json\";}\n\n      xhr.open(method, getURL(), !sync);\n      if (!sync) {\n        xhr.onreadystatechange = function () {\n          if (this.readyState == 4) {\n            if (this.status >= 200 && this.status < 300 || this.status === 304) {\n              cb(null, raw ? this.responseText : this.responseText ? JSON.parse(this.responseText) : true, this);\n            } else {\n              cb({path: path, request: this, error: this.status});\n            }\n          }\n        };\n      }\n      xhr.setRequestHeader('Accept','application/vnd.github.v3.raw+json');\n      xhr.setRequestHeader('Content-Type','application/json;charset=UTF-8');\n      if ((options.token) || (options.username && options.password)) {\n        var authorization = options.token ? 'token ' + options.token : 'Basic ' + btoa(options.username + ':' + options.password);\n        xhr.setRequestHeader('Authorization', authorization);\n      }\n      if (data)\n        xhr.send(JSON.stringify(data));\n      else\n        xhr.send();\n      if (sync) return xhr.response;\n    }\n\n    function _requestAllPages(path, cb) {\n      var results = [];\n      (function iterate() {\n        _request(\"GET\", path, null, function(err, res, xhr) {\n          if (err) {\n            return cb(err);\n          }\n\n          results.push.apply(results, res);\n\n          var links = (xhr.getResponseHeader('link') || '').split(/\\s*,\\s*/g),\n              next = _.find(links, function(link) { return /rel=\"next\"/.test(link); });\n\n          if (next) {\n            next = (/<(.*)>/.exec(next) || [])[1];\n          }\n\n          if (!next) {\n            cb(err, results);\n          } else {\n            path = next;\n            iterate();\n          }\n        });\n      })();\n    }\n\n\n\n    // User API\n    // =======\n\n    Github.User = function() {\n      this.repos = function(cb) {\n        // Github does not always honor the 1000 limit so we want to iterate over the data set.\n        _requestAllPages(\"/user/repos?type=all&per_page=1000&sort=updated\", function(err, res) {\n          cb(err, res);\n        });\n      };\n\n      // List user organizations\n      // -------\n\n      this.orgs = function(cb) {\n        _request(\"GET\", \"/user/orgs\", null, function(err, res) {\n          cb(err, res);\n        });\n      };\n\n      // List authenticated user's gists\n      // -------\n\n      this.gists = function(cb) {\n        _request(\"GET\", \"/gists\", null, function(err, res) {\n          cb(err,res);\n        });\n      };\n\n      // List authenticated user's unread notifications\n      // -------\n\n      this.notifications = function(cb) {\n        _request(\"GET\", \"/notifications\", null, function(err, res) {\n          cb(err,res);\n        });\n      };\n\n      // Show user information\n      // -------\n\n      this.show = function(username, cb) {\n        var command = username ? \"/users/\"+username : \"/user\";\n\n        _request(\"GET\", command, null, function(err, res) {\n          cb(err, res);\n        });\n      };\n\n      // List user repositories\n      // -------\n\n      this.userRepos = function(username, cb) {\n        // Github does not always honor the 1000 limit so we want to iterate over the data set.\n        _requestAllPages(\"/users/\"+username+\"/repos?type=all&per_page=1000&sort=updated\", function(err, res) {\n          cb(err, res);\n        });\n      };\n\n      // List user events\n      // -----      \n      this.userEvents = function(username, cb) {\n        var command = \"/users/\"+ username + \"/events/public\";\n\n        _request(\"GET\", command, null, function(err, res) {\n          cb(err, res);\n        });\n      };\n\n      // List user followers\n      // -----      \n      this.userFollowers = function(username, cb) {\n        var command = \"/users/\"+ username + \"/followers\";\n\n        _request(\"GET\", command, null, function(err, res) {\n          cb(err, res);\n        });\n      };\n\n      // List a user's gists\n      // -------\n\n      this.userGists = function(username, cb) {\n        _request(\"GET\", \"/users/\"+username+\"/gists\", null, function(err, res) {\n          cb(err,res);\n        });\n      };\n\n      // List organization repositories\n      // -------\n\n      this.orgRepos = function(orgname, cb) {\n        // Github does not always honor the 1000 limit so we want to iterate over the data set.\n        _requestAllPages(\"/orgs/\"+orgname+\"/repos?type=all&&page_num=1000&sort=updated&direction=desc\", function(err, res) {\n          cb(err, res);\n        });\n      };\n\n      // Follow user\n      // -------\n      this.follow = function(username, cb) {\n        _request(\"PUT\", \"/user/following/\"+username, null, function(err, res) {\n          cb(err, res);\n        });\n      };\n\n      // Unfollow user\n      // -------\n\n      this.unfollow = function(username, cb) {\n        _request(\"DELETE\", \"/user/following/\"+username, null, function(err, res) {\n          cb(err, res);\n        });\n      };\n    };\n\n\n    // Repository API\n    // =======\n\n    Github.Repository = function(options) {\n      var repo = options.name;\n      var user = options.user;\n\n      var that = this;\n      var repoPath = \"/repos/\" + user + \"/\" + repo;\n\n      var currentTree = {\n        \"branch\": null,\n        \"sha\": null\n      };\n\n      // Uses the cache if branch has not been changed\n      // -------\n\n      function updateTree(branch, cb) {\n        if (branch === currentTree.branch && currentTree.sha) return cb(null, currentTree.sha);\n        that.getRef(\"heads/\"+branch, function(err, sha) {\n          currentTree.branch = branch;\n          currentTree.sha = sha;\n          cb(err, sha);\n        });\n      }\n\n      // Get a particular reference\n      // -------\n\n      this.getRef = function(ref, cb) {\n        _request(\"GET\", repoPath + \"/git/refs/\" + ref, null, function(err, res) {\n          if (err) return cb(err);\n          cb(null, res.object.sha);\n        });\n      };\n\n      // Create a new reference\n      // --------\n      //\n      // {\n      //   \"ref\": \"refs/heads/my-new-branch-name\",\n      //   \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\n      // }\n\n      this.createRef = function(options, cb) {\n        _request(\"POST\", repoPath + \"/git/refs\", options, cb);\n      };\n\n      // Delete a reference\n      // --------\n      //\n      // repo.deleteRef('heads/gh-pages')\n      // repo.deleteRef('tags/v1.0')\n\n      this.deleteRef = function(ref, cb) {\n        _request(\"DELETE\", repoPath + \"/git/refs/\"+ref, options, cb);\n      };\n\n      // Create a repo\n      // -------\n\n      this.createRepo = function(options, cb) {\n        _request(\"POST\", \"/user/repos\", options, cb);\n      };\n\n      // Delete a repo\n      // --------\n\n      this.deleteRepo = function(cb) {\n        _request(\"DELETE\", repoPath, options, cb);\n      };\n\n      // List all tags of a repository\n      // -------\n\n      this.listTags = function(cb) {\n        _request(\"GET\", repoPath + \"/tags\", null, function(err, tags) {\n          if (err) return cb(err);\n          cb(null, tags);\n        });\n      };\n\n      // List all pull requests of a respository\n      // -------\n\n      this.listPulls = function(state, cb) {\n        _request(\"GET\", repoPath + \"/pulls\" + (state ? '?state=' + state : ''), null, function(err, pulls) {\n          if (err) return cb(err);\n          cb(null, pulls);\n        });\n      };\n\n      // Gets details for a specific pull request\n      // -------\n\n      this.getPull = function(number, cb) {\n        _request(\"GET\", repoPath + \"/pulls/\" + number, null, function(err, pull) {\n          if (err) return cb(err);\n          cb(null, pull);\n        });\n      };\n\n      // Retrieve the changes made between base and head\n      // -------\n\n      this.compare = function(base, head, cb) {\n        _request(\"GET\", repoPath + \"/compare/\" + base + \"...\" + head, null, function(err, diff) {\n          if (err) return cb(err);\n          cb(null, diff);\n        });\n      };\n\n      // List all branches of a repository\n      // -------\n\n      this.listBranches = function(cb) {\n        _request(\"GET\", repoPath + \"/git/refs/heads\", null, function(err, heads) {\n          if (err) return cb(err);\n          cb(null, _.map(heads, function(head) { return _.last(head.ref.split('/')); }));\n        });\n      };\n\n      // Retrieve the contents of a blob\n      // -------\n\n      this.getBlob = function(sha, cb) {\n        _request(\"GET\", repoPath + \"/git/blobs/\" + sha, null, cb, 'raw');\n      };\n\n      // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n      // -------\n\n      this.getSha = function(branch, path, cb) {\n        // Just use head if path is empty\n        if (path === \"\") return that.getRef(\"heads/\"+branch, cb);\n        that.getTree(branch+\"?recursive=true\", function(err, tree) {\n          if (err) return cb(err);\n          var file = _.select(tree, function(file) {\n            return file.path === path;\n          })[0];\n          cb(null, file ? file.sha : null);\n        });\n      };\n\n      // Retrieve the tree a commit points to\n      // -------\n\n      this.getTree = function(tree, cb) {\n        _request(\"GET\", repoPath + \"/git/trees/\"+tree, null, function(err, res) {\n          if (err) return cb(err);\n          cb(null, res.tree);\n        });\n      };\n\n      // Post a new blob object, getting a blob SHA back\n      // -------\n\n      this.postBlob = function(content, cb) {\n        if (typeof(content) === \"string\") {\n          content = {\n            \"content\": content,\n            \"encoding\": \"utf-8\"\n          };\n        } else {\n          \tcontent = {\n              \"content\": btoa(String.fromCharCode.apply(null, new Uint8Array(content))),\n              \"encoding\": \"base64\"\n            };\n          }\n\n        _request(\"POST\", repoPath + \"/git/blobs\", content, function(err, res) {\n          if (err) return cb(err);\n          cb(null, res.sha);\n        });\n      };\n\n      // Update an existing tree adding a new blob object getting a tree SHA back\n      // -------\n\n      this.updateTree = function(baseTree, path, blob, cb) {\n        var data = {\n          \"base_tree\": baseTree,\n          \"tree\": [\n            {\n              \"path\": path,\n              \"mode\": \"100644\",\n              \"type\": \"blob\",\n              \"sha\": blob\n            }\n          ]\n        };\n        _request(\"POST\", repoPath + \"/git/trees\", data, function(err, res) {\n          if (err) return cb(err);\n          cb(null, res.sha);\n        });\n      };\n\n      // Post a new tree object having a file path pointer replaced\n      // with a new blob SHA getting a tree SHA back\n      // -------\n\n      this.postTree = function(tree, cb) {\n        _request(\"POST\", repoPath + \"/git/trees\", { \"tree\": tree }, function(err, res) {\n          if (err) return cb(err);\n          cb(null, res.sha);\n        });\n      };\n\n      // Create a new commit object with the current commit SHA as the parent\n      // and the new tree SHA, getting a commit SHA back\n      // -------\n\n      this.commit = function(parent, tree, message, cb) {\n        var user = new Github.User();\n        user.show(null, function(err, userData){\n          if (err) return cb(err);\n          var data = {\n            \"message\": message,\n            \"author\": {\n              \"name\": options.user,\n              \"email\": userData.email\n            },\n            \"parents\": [\n              parent\n            ],\n            \"tree\": tree\n          };\n          _request(\"POST\", repoPath + \"/git/commits\", data, function(err, res) {\n            if (err) return cb(err);\n            currentTree.sha = res.sha; // update latest commit\n            cb(null, res.sha);\n          });\n        });\n      };\n\n      // Update the reference of your head to point to the new commit SHA\n      // -------\n\n      this.updateHead = function(head, commit, cb) {\n        _request(\"PATCH\", repoPath + \"/git/refs/heads/\" + head, { \"sha\": commit }, function(err, res) {\n          cb(err);\n        });\n      };\n\n      // Show repository information\n      // -------\n\n      this.show = function(cb) {\n        _request(\"GET\", repoPath, null, cb);\n      };\n\n      // Get contents\n      // --------\n\n      this.contents = function(branch, path, cb, sync) {\n        return _request(\"GET\", repoPath + \"/contents?ref=\" + branch + (path ? \"&path=\" + path : \"\"), null, cb, 'raw', sync);\n      };\n\n      // Fork repository\n      // -------\n\n      this.fork = function(cb) {\n        _request(\"POST\", repoPath + \"/forks\", null, cb);\n      };\n\n      // Branch repository\n      // --------\n\n      this.branch = function(oldBranch,newBranch,cb) {\n        if(arguments.length === 2 && typeof arguments[1] === \"function\") {\n          cb = newBranch;\n          newBranch = oldBranch;\n          oldBranch = \"master\";\n        }\n        this.getRef(\"heads/\" + oldBranch, function(err,ref) {\n          if(err && cb) return cb(err);\n          that.createRef({\n            ref: \"refs/heads/\" + newBranch,\n            sha: ref\n          },cb);\n        });\n      };\n\n      // Create pull request\n      // --------\n\n      this.createPullRequest = function(options, cb) {\n        _request(\"POST\", repoPath + \"/pulls\", options, cb);\n      };\n\n      // List hooks\n      // --------\n\n      this.listHooks = function(cb) {\n        _request(\"GET\", repoPath + \"/hooks\", null, cb);\n      };\n\n      // Get a hook\n      // --------\n\n      this.getHook = function(id, cb) {\n        _request(\"GET\", repoPath + \"/hooks/\" + id, null, cb);\n      };\n\n      // Create a hook\n      // --------\n\n      this.createHook = function(options, cb) {\n        _request(\"POST\", repoPath + \"/hooks\", options, cb);\n      };\n\n      // Edit a hook\n      // --------\n\n      this.editHook = function(id, options, cb) {\n        _request(\"PATCH\", repoPath + \"/hooks/\" + id, options, cb);\n      };\n\n      // Delete a hook\n      // --------\n\n      this.deleteHook = function(id, cb) {\n        _request(\"DELETE\", repoPath + \"/hooks/\" + id, null, cb);\n      };\n\n      // Read file at given path\n      // -------\n\n      this.read = function(branch, path, cb) {\n        that.getSha(branch, path, function(err, sha) {\n          if (!sha) return cb(\"not found\", null);\n          that.getBlob(sha, function(err, content) {\n            cb(err, content, sha);\n          });\n        });\n      };\n\n      // Remove a file from the tree\n      // -------\n\n      this.remove = function(branch, path, cb) {\n        updateTree(branch, function(err, latestCommit) {\n          that.getTree(latestCommit+\"?recursive=true\", function(err, tree) {\n            // Update Tree\n            var newTree = _.reject(tree, function(ref) { return ref.path === path; });\n            _.each(newTree, function(ref) {\n              if (ref.type === \"tree\") delete ref.sha;\n            });\n\n            that.postTree(newTree, function(err, rootTree) {\n              that.commit(latestCommit, rootTree, 'Deleted '+path , function(err, commit) {\n                that.updateHead(branch, commit, function(err) {\n                  cb(err);\n                });\n              });\n            });\n          });\n        });\n      };\n\n      // Delete a file from the tree\n      // -------\n\n      this.delete = function(branch, path, cb) {\n        that.getSha(branch, path, function(err, sha) {\n          if (!sha) return cb(\"not found\", null);\n          var delPath = repoPath + \"/contents/\" + path;\n          var params = {\n            \"message\": \"Deleted \" + path,\n            \"sha\": sha\n          };\n          delPath += \"?message=\" + encodeURIComponent(params.message);\n          delPath += \"&sha=\" + encodeURIComponent(params.sha);\n          _request(\"DELETE\", delPath, null, cb);\n        });\n      };\n\n      // Move a file to a new location\n      // -------\n\n      this.move = function(branch, path, newPath, cb) {\n        updateTree(branch, function(err, latestCommit) {\n          that.getTree(latestCommit+\"?recursive=true\", function(err, tree) {\n            // Update Tree\n            _.each(tree, function(ref) {\n              if (ref.path === path) ref.path = newPath;\n              if (ref.type === \"tree\") delete ref.sha;\n            });\n\n            that.postTree(tree, function(err, rootTree) {\n              that.commit(latestCommit, rootTree, 'Deleted '+path , function(err, commit) {\n                that.updateHead(branch, commit, function(err) {\n                  cb(err);\n                });\n              });\n            });\n          });\n        });\n      };\n\n      // Write file contents to a given branch and path\n      // -------\n\n      this.write = function(branch, path, content, message, cb) {\n        updateTree(branch, function(err, latestCommit) {\n          if (err) return cb(err);\n          that.postBlob(content, function(err, blob) {\n            if (err) return cb(err);\n            that.updateTree(latestCommit, path, blob, function(err, tree) {\n              if (err) return cb(err);\n              that.commit(latestCommit, tree, message, function(err, commit) {\n                if (err) return cb(err);\n                that.updateHead(branch, commit, cb);\n              });\n            });\n          });\n        });\n      };\n\n      // List commits on a repository. Takes an object of optional paramaters:\n      // sha: SHA or branch to start listing commits from\n      // path: Only commits containing this file path will be returned\n      // since: ISO 8601 date - only commits after this date will be returned\n      // until: ISO 8601 date - only commits before this date will be returned\n      // -------\n\n      this.getCommits = function(options, cb) {\n          options = options || {};\n          var url = repoPath + \"/commits\";\n          var params = [];\n          if (options.sha) {\n              params.push(\"sha=\" + encodeURIComponent(options.sha));\n          }\n          if (options.path) {\n              params.push(\"path=\" + encodeURIComponent(options.path));\n          }\n          if (options.since) {\n              var since = options.since;\n              if (since.constructor === Date) {\n                  since = since.toISOString();\n              }\n              params.push(\"since=\" + encodeURIComponent(since));\n          }\n          if (options.until) {\n              var until = options.until;\n              if (until.constructor === Date) {\n                  until = until.toISOString();\n              }\n              params.push(\"until=\" + encodeURIComponent(until));\n          }\n          if (params.length > 0) {\n              url += \"?\" + params.join(\"&\");\n          }\n          _request(\"GET\", url, null, cb);\n      };\n    };\n\n    // Gists API\n    // =======\n\n    Github.Gist = function(options) {\n      var id = options.id;\n      var gistPath = \"/gists/\"+id;\n\n      // Read the gist\n      // --------\n\n      this.read = function(cb) {\n        _request(\"GET\", gistPath, null, function(err, gist) {\n          cb(err, gist);\n        });\n      };\n\n      // Create the gist\n      // --------\n      // {\n      //  \"description\": \"the description for this gist\",\n      //    \"public\": true,\n      //    \"files\": {\n      //      \"file1.txt\": {\n      //        \"content\": \"String file contents\"\n      //      }\n      //    }\n      // }\n\n      this.create = function(options, cb){\n        _request(\"POST\",\"/gists\", options, cb);\n      };\n\n      // Delete the gist\n      // --------\n\n      this.delete = function(cb) {\n        _request(\"DELETE\", gistPath, null, function(err,res) {\n          cb(err,res);\n        });\n      };\n\n      // Fork a gist\n      // --------\n\n      this.fork = function(cb) {\n        _request(\"POST\", gistPath+\"/fork\", null, function(err,res) {\n          cb(err,res);\n        });\n      };\n\n      // Update a gist with the new stuff\n      // --------\n\n      this.update = function(options, cb) {\n        _request(\"PATCH\", gistPath, options, function(err,res) {\n          cb(err,res);\n        });\n      };\n\n      // Star a gist\n      // --------\n\n      this.star = function(cb) {\n        _request(\"PUT\", gistPath+\"/star\", null, function(err,res) {\n          cb(err,res);\n        });\n      };\n\n      // Untar a gist\n      // --------\n\n      this.unstar = function(cb) {\n        _request(\"DELETE\", gistPath+\"/star\", null, function(err,res) {\n          cb(err,res);\n        });\n      };\n\n      // Check if a gist is starred\n      // --------\n\n      this.isStarred = function(cb) {\n        _request(\"GET\", gistPath+\"/star\", null, function(err,res) {\n          cb(err,res);\n        });\n      };\n    };\n\n    // Issues API\n    // ==========\n\n    Github.Issue = function(options) {\n      var path = \"/repos/\" + options.user + \"/\" + options.repo + \"/issues\";\n\n      this.list = function(options, cb) {\n        _request(\"GET\", path, options, cb);\n      };\n    };\n\n    // Top Level API\n    // -------\n\n    this.getIssues = function(user, repo) {\n      return new Github.Issue({user: user, repo: repo});\n    };\n\n    this.getRepo = function(user, repo) {\n      return new Github.Repository({user: user, name: repo});\n    };\n\n    this.getUser = function() {\n      return new Github.User();\n    };\n\n    this.getGist = function(id) {\n      return new Github.Gist({id: id});\n    };\n  };\n\n\n  if (typeof exports !== 'undefined') {\n    // Github = exports;\n    module.exports = Github;\n  } else {\n    window.Github = Github;\n  }\n}).call(this);\n"],"sourceRoot":"/source/"}